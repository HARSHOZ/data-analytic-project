SELECT * 
FROM layoffs;

-- 1 remove duplicates
-- 2 standardize the data
-- 3 null values or blank values
-- 4 remove any colm or rows

create table layoffs_staging -- to make a copy of data to work on so original data should be there ifmistakes happens
like layoffs;
SELECT * 
FROM layoffs_staging ;
insert layoffs_staging
select *
from layoffs;

SELECT * ,
row_number() over(partition by company, location, industry, total_laid_off,  percentage_laid_off, 'date',
 stage, country , funds_raised_millions ) as row_num
FROM layoffs_staging ;

with duplicate_cte as
(
SELECT * ,
row_number() over(partition by company, location, industry, total_laid_off,  percentage_laid_off, 'date',
 stage, country , funds_raised_millions ) as row_num
FROM layoffs_staging 
)
delete
from duplicate_cte
where row_num > 1;

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL ,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select *
from layoffs_staging2 ;
insert into layoffs_staging2
SELECT * ,
row_number() over(partition by company, location, industry, total_laid_off,  percentage_laid_off, 'date',
 stage, country , funds_raised_millions ) as row_num
FROM layoffs_staging ;

SET SQL_SAFE_UPDATES = 0;

delete
from layoffs_staging2
where row_num > 1;

select *
from layoffs_staging2
where row_num > 1;

-- standardizing data

select company ,  (trim(company)) 
from layoffs_staging2;

update layoffs_staging2
set company = trim(company); 

select  *
from layoffs_staging2
where industry like 'crypto%' ;

update layoffs_staging2
set industry = 'crypto'
where industry like 'crypto%' ;

select distinct country, trim(trailing '.' from country)
from layoffs_staging2 
order by 1
;

update layoffs_staging2
set country =  trim(trailing '.' from country)
where country like 'United States%' ;

select `date` 
-- str_to_date( `date` , '%m/%d/%Y') 
from layoffs_staging2;

update layoffs_staging2
set `date` = str_to_date( `date` , '%m/%d/%Y');

alter table layoffs_staging2
modify column `date`  date;


-- null and blanks
update layoffs_staging2
set industry = null 
where industry = '' ;

select *
from layoffs_staging2
where industry is null
or industry = '';

select *
from layoffs_staging2
where company = 'Airbnb';
select t1.industry, t2.industry
from layoffs_staging2 t1
join layoffs_staging2 t2
 on t1.company = t2.company
 and t1.location = t2.location
 where (t1.industry is null or t1.industry = '')
 and t2.industry is not null ;

update layoffs_staging2 t1
join layoffs_staging2 t2 
on t1.company = t2.company 
set t1.industry = t2.industry
where t1.industry is null 
 and t2.industry is not null ;
 
 select *
from layoffs_staging2 
where (total_laid_off or percentage_laid_off) is null ;

delete
from layoffs_staging2 
where (total_laid_off or percentage_laid_off) is null ;

select *
from layoffs_staging2;
alter table layoffs_staging2
drop column row_num;



select max(total_laid_off) , max(percentage_laid_off)
 from layoffs_staging2;
 
 select *
 from layoffs_staging2
 where percentage_laid_off = 1
 order by funds_raised_millions desc ;
 
 -- companies with most laidoofs
 select company , sum(total_laid_off)
 from layoffs_staging2
 group by company
 order by 2 desc;
 
 select min(`date`) , max(`date`)
 from layoffs_staging2;
 
 -- industry with max layoffs
 select industry, sum(total_laid_off)
 from layoffs_staging2
 group by industry
 order by 2 desc;
 
  -- country with max layoffs
 select country, sum(total_laid_off)
 from layoffs_staging2
 group by country
 order by 2 desc;
 
 -- years with max lyoffs (recession period)
  select year(`date`), sum(total_laid_off)
 from layoffs_staging2
 group by year(`date`)
 order by 1 desc ;
 
 -- big compnaies with most layoffs
  select stage , sum(total_laid_off)
 from layoffs_staging2
 group by stage
 order by 2 desc;
 
 -- rolling sum
 
 select substring(`date`, 1, 7) as `month` , sum(total_laid_off)
 from layoffs_staging2
 where substring(`date`, 1, 7) is not null
 group by `month`
 order by 1 asc ; 
 
 with rolling_total as
 (
	 select substring(`date`, 1, 7) as `month` , sum(total_laid_off) as total_off
	 from layoffs_staging2
	 where substring(`date`, 1, 7) is not null
	 group by `month`
	 order by 1 asc 
)
 
 select `month` , total_off , sum(total_off) over(order by `month` ) as rolling_total
 from rolling_total ; 
 
   select company , sum(total_laid_off)
 from layoffs_staging2
 group by company
 order by 2 desc;
 
 select company , year(`date`) , sum(total_laid_off)
 from layoffs_staging2
 group by company , year(`date`)
 order by 3 desc ;
 
 with company_year (company, years, total_laid_off) as -- first cte 
 (
	  select company , year(`date`) , sum(total_laid_off)
	 from layoffs_staging2
	 group by company , year(`date`)
), 
company_year_rank as -- second cte for finding top 5 companies having most layoofs each year
(
	select *, dense_rank() over (partition by years order by total_laid_off desc) as ranking
	from company_year  -- calling from first cte
	where years is not null 
 )

select *
from company_year
where ranking <= 5
 ;
 
 
 
